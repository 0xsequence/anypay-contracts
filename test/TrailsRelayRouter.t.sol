// SPDX-License-Identifier: MIT
pragma solidity ^0.8.30;

import {Test} from "forge-std/Test.sol";
import {TrailsRelayRouter} from "@/TrailsRelayRouter.sol";

contract RevertingReceiver {
    fallback() external payable {
        revert("Always reverts");
    }
}

contract TrailsRelayRouterTest is Test {
    TrailsRelayRouter public router;
    RevertingReceiver public revertingReceiver;

    function setUp() public {
        revertingReceiver = new RevertingReceiver();
        router = new TrailsRelayRouter(address(revertingReceiver));
    }

    function test_execute_valid() public {
        // This is the ABI-encoded byte representation of a single-element array
        // containing a "Call" tuple, where `to` is the relay multicall proxy.
        bytes memory data =
            hex"000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000f5042e6ffac5a625d4e7848e0b01373d8eb9e2220000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";

        vm.expectRevert(TrailsRelayRouter.ExecutionFailed.selector);
        router.execute{value: 1 ether}(data);
    }

    function test_execute_invalidRecipient() public {
        // This is the ABI-encoded byte representation of a single-element array
        // containing a "Call" tuple, where `to` is an invalid recipient.
        bytes memory data =
            hex"000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000dead0000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000123";

        vm.expectRevert("Invalid relay recipients");
        router.execute{value: 1 ether}(data);
    }

    function test_execute_emptyCalls() public {
        // The ABI encoding of an empty dynamic array is a 32-byte offset (0x20)
        // followed by a 32-byte length (0).
        bytes memory data =
            hex"00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000";

        vm.expectRevert("Invalid relay recipients");
        router.execute(data);
    }
}
